/*
 * Bongosec Vulnerability scanner
 * Copyright (C) 2025, BongoSec
 * Nov 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "argsParser.hpp"
#include "json.hpp"
#include "socketDBWrapper.hpp"
#include "bongosecDBQueryBuilder.hpp"
#include <iostream>
#include <unordered_map>

auto constexpr BONGOSEC_DB_SOCK {"/var/ossec/queue/db/wdb"};

const std::unordered_map<std::string, BongosecDBQueryBuilder& (BongosecDBQueryBuilder::*)()> FUNC_MAP {
    {"global", &BongosecDBQueryBuilder::global}, {"selectAll", &BongosecDBQueryBuilder::selectAll}};

const std::unordered_map<std::string, BongosecDBQueryBuilder& (BongosecDBQueryBuilder::*)(const std::string&)> FUNC_ARG_MAP {
    {"agent", &BongosecDBQueryBuilder::agent},
    {"fromTable", &BongosecDBQueryBuilder::fromTable},
    {"equalsTo", &BongosecDBQueryBuilder::equalsTo},
    {"whereColumn", &BongosecDBQueryBuilder::whereColumn},
    {"andColumn", &BongosecDBQueryBuilder::andColumn},
    {"orColumn", &BongosecDBQueryBuilder::orColumn},
    {"globalGetCommand", &BongosecDBQueryBuilder::globalGetCommand},
    {"globalFindCommand", &BongosecDBQueryBuilder::globalFindCommand},
    {"globalSelectCommand", &BongosecDBQueryBuilder::globalSelectCommand},
    {"agentGetOsInfoCommand", &BongosecDBQueryBuilder::agentGetOsInfoCommand},
    {"agentGetHotfixesCommand", &BongosecDBQueryBuilder::agentGetHotfixesCommand},
    {"agentGetPackagesCommand", &BongosecDBQueryBuilder::agentGetPackagesCommand}};

int main(const int argc, const char* argv[])
{
    try
    {
        CmdLineArgs cmdLineArgs(argc, argv);

        // Read json configuration file
        auto configuration = nlohmann::json::parse(std::ifstream(cmdLineArgs.getConfigurationFilePath()));
        nlohmann::json response;
        SocketDBWrapper::instance().init(BONGOSEC_DB_SOCK);

        for (const auto& query : configuration.at("queries"))
        {
            auto bongosecDBQueryBuilder = BongosecDBQueryBuilder::builder();

            for (const auto& element : query)
            {
                if (!element.contains("arg"))
                {
                    (bongosecDBQueryBuilder.*(FUNC_MAP.at(element.at("method"))))();
                }
                else
                {
                    (bongosecDBQueryBuilder.*(FUNC_ARG_MAP.at(element.at("method"))))(element.at("arg"));
                }
            }

            auto queryStr = bongosecDBQueryBuilder.build();
            SocketDBWrapper::instance().query(queryStr, response);

            std::cout << "Response to \"" << queryStr << "\":\n" << response.dump(4) << std::endl;
        }
    }
    catch (const std::exception& e)
    {
        std::cerr << e.what() << std::endl;
        CmdLineArgs::showHelp();
        return 1;
    }
    return 0;
}
